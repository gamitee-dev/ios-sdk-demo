[
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/co.joyned.mobile.JoynedMobileSDK\/documentation\/JoynedMobileSDK\/JoynedSample"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Integrate JoynedMobileSDK into an iOS app for booking and ordering togather.",
    "summary" : "Integrate JoynedMobileSDK into an iOS app for booking and ordering togather.",
    "title" : "Sample code - Voyage App"
  },
  {
    "headings" : [
      "Overview",
      "For more information see:"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/co.joyned.mobile.JoynedMobileSDK\/documentation\/JoynedMobileSDK\/transaction"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "API to make joyned is aware of all purchase transactions processed by your application. Overview The Joyned transaction is an “analytics” fire & forget like API Simply create a JoynedTransactionRequest object and pass it to the JoynedSDK. Code Example:  For more information see:",
    "summary" : "API to make joyned is aware of all purchase transactions processed by your application.",
    "title" : "Report transaction"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/co.joyned.mobile.JoynedMobileSDK\/documentation\/JoynedMobileSDK\/installation"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "How to install this library Overview The Swift Package Manager is a tool for automating the distribution of Swift code and is integrated into the swift compiler. Once you have your Swift package set up, adding JoynedMobileSDK as a dependency is as easy as adding it to the dependencies value of your Package.swift or the Package list in Xcode.  Normally you’ll want to depend on the Joyned target:  CocoaPods is a dependency manager for Cocoa projects. To install cocoapods via gem if needed Open terminal Type $ [sudo] gem install cocoapods Press enter For more usage and installation instructions, visit their website. To integrate Joyned into your Xcode project using CocoaPods, specify it in your Podfile:  In the terminal run pod install Note for Mac M1 users: Mac M1 architecture is not directly compatible with Cocoapods. If you encounter issues when installing pods, you can solve it by running: sudo arch -x86_64 gem install ffi arch -x86_64 pod install These commands install the ffi package, to load dynamically-linked libraries and let you run the pod install properly, and runs pod install with the proper architecture. If you prefer not to use any of the other dependency managers, you can integrate Joyned into your project manually by adding the XCFramework to the project.",
    "summary" : "How to install this library",
    "title" : "Library installation"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/co.joyned.mobile.JoynedMobileSDK\/documentation\/JoynedMobileSDK\/global_delegate"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Joyned mobile SDK provides several intervention hooks via the JoynedSDKDelegate protocol Overview The JoynedSDKDelegate is responsible for global interactions with the SDK, things like what locale the system should use, or simple notification on some system events Notifications: Locale Navigation actions Please note: You will not be able to interact with JoynedMobileSDK without implementing this protocol.  Usage Example: ",
    "summary" : "Joyned mobile SDK provides several intervention hooks via the JoynedSDKDelegate protocol",
    "title" : "Global Delegate"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/co.joyned.mobile.JoynedMobileSDK\/documentation\/JoynedMobileSDK\/advance"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Extra options to configure SDK sub-elements Overview Support custom behavior by setting the joynedAreaComputation property of each UIViewController in it’s viewDidLoad    Code Example:  Joyned Mobile SDK allows advance usage of its build-in logger via plist based flags Add JoynedMobileSDKAutoLogs as a Dictionary to the Joyned-Info plist file to configure automatic logs. To the resulting Dictionary add any of the following keys with the relevant boolean value: JoynedMobileSDKAutoLogsGeneral JoynedMobileSDKAutoLogsInternalDealloc JoynedMobileSDKAutoLogsInternalPersistence JoynedMobileSDKAutoLogsInternalPresentationLogic JoynedMobileSDKAutoLogsInternalUIPresentation JoynedMobileSDKAutoLogsInternalUIFloating JoynedMobileSDKAutoLogsInternalUIJoyned JoynedMobileSDKAutoLogsInternalNetwork JoynedMobileSDKAutoLogsWebConsole JoynedMobileSDKAutoLogsInternalEvents JoynedMobileSDKAutoLogsInternalScreenChange Any key with a true value will effect the resulting Console logs Note: You can as many key as you like to the system. Plist integration Example: ",
    "summary" : "Extra options to configure SDK sub-elements",
    "title" : "Advance SDK configuration"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/co.joyned.mobile.JoynedMobileSDK\/documentation\/JoynedMobileSDK\/activation"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "There are several different ways to activate of the Joyned mobile SDK Overview In general there are two diffrent ways to initiate the activation of the Joyned mobile SDK automatic manual Both ways are based on pramaters passsed in the Joyned-Info.plist file in the host application bundle. Make sure you have a file with this name in the main application target. Add the JoynedMobileSDKManualActivation key to the Joyned-Info plist file. Set the value to YES as a Boolean paramater to tell the system that we want to activate the Joyned system manually. Once you have the flag in place you can manually call the relevent method to trigger the SDK activation. A good activation location is the application:didFinishLaunchingWithOptions: method:  See also: JoynedMobileSDK\/JoynedSDK\/activate(with:and:) Add JoynedMobileSDKCredentials as a Dictionary to the Joyned-Info plist file to configure automatic activation. To the resulting Dictionary add the following keys with the relevant string values: JoynedMobileSDKActivationKey JoynedMobileSDKOriginKey Example:  Optional: Add the JoynedMobileSDKManualActivation key to the Joyned-Info plist file. Set the value to NO as a Boolean paramater to tell the system that we want to activate the Joyned system automaticlly.",
    "summary" : "There are several different ways to activate of the Joyned mobile SDK",
    "title" : "Activation Methods"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/co.joyned.mobile.JoynedMobileSDK\/documentation\/GettingStarted"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " Overview",
    "summary" : "",
    "title" : "Getting Started with Joyned mobile SDK"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/co.joyned.mobile.JoynedMobileSDK\/documentation\/JoynedMobileSDK\/offering"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "API for interacting with JoynedMobileSDK offerings Overview Joyned supports displaying diffrent offerings based on the application’s category it can be anything from an e-comerce product, to a hotel booking (this is why we use the term Offering) Joyned mobile sdk allows its integrator to interact with offerings in two seperate ways: adding offerings to the system responding to user click on existing offerings in the Joyned UI Adding a new Offering  Joyned supports adding a new Offering only via the hosted UI. Once a user taps on the relevent button the mobile SDK asks its host application for the offering information via a delegation protocol and processes it accordingly. The delegation protocol in question is the JoynedButtonDelegate you will need to The button delegate protocol covers three diffrent situations : Standalone Table \/ Collection view Standalone example:  Table \/ Collection example:  In-App navigation in response to user action To support in-app navigation Joyned mobile sdk  exposes a delegation method via its public accessd class. When user taps on an offering within the floating container the system extracts it’s data , wrapps it into a rsponse object and calls on its delegate object with the JoynedSDKDelegate\/mobileSDKDidTriggerNavigation(for:). Note: This is the only required method in the JoynedSDKDelegate protocol. In-app navigation example: ",
    "summary" : "API for interacting with JoynedMobileSDK offerings",
    "title" : "Offering handling API"
  },
  {
    "headings" : [
      "Overview",
      "Xib\/Storyboard",
      "Code Integration",
      "For more information see:"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/co.joyned.mobile.JoynedMobileSDK\/documentation\/JoynedMobileSDK\/hosted_ui"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Hosted Joyned UI Joyned mobile SDK provides a few views which are ment to be used within application that hosts the SDK Overview There are two ways to integrated Joyned mobile SDK views into the host application: via Xib\/Storyboard via Code Xib\/Storyboard To integrate a JoynedButton in to Xib or Storyboard based UI all you need to do is to add a view element to the Xib\/Storyboard document and set its custom class to JoynedButton. Make sure to also set the module value in the inspector to JoynedMobileSDK  Code Integration To integrate a JoynedButton in to a UIKit code based UI, use the following code:  Also see: Make sure that you implement the button’s delegate protocol and set it’s delegate like so:  For more information see:",
    "summary" : "Hosted Joyned UI Joyned mobile SDK provides a few views which are ment to be used within application that hosts the SDK",
    "title" : "Hosted UI"
  },
  {
    "headings" : [
      "Overview",
      "For more information see:"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/co.joyned.mobile.JoynedMobileSDK\/documentation\/JoynedMobileSDK\/invitation_links"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Handle supported deeplinks for Joyned content Overview Joyned invitation links allow a user to invite his friends into his Joyned session. The simplest way of doing so is by opening a Joyned session and using its UI to share an invitation via one of the supported share options, this can be done from both the Web UI or the mobile app.      Share payload: The share payload contains a “short” link which will redirect the system to a “long” link. The “long” link needs to be of a format supported by the host mobile appliaction for the system integration to fully work. Example of a share message:  To integrate the invitation links element into the application you first need to implement Universal links Implement Universal links by following the instruction as shown on apple developer website universal-links -  general universal-links - allowing apps to link to your content Once implemented, you need to add the relevent Joyned methods from within the applications scene delegate:  For more information see:",
    "summary" : "Handle supported deeplinks for Joyned content",
    "title" : "Joyned Session invitation links"
  },
  {
    "headings" : [
      "Overview",
      "Screen List Validation Controls",
      "Manual screen controls"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/co.joyned.mobile.JoynedMobileSDK\/documentation\/JoynedMobileSDK\/screen_llst"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Joyned Mobile SDK screen change monitor Overview Joyned Mobile SDK monitors the host application for screen changes and adjusts its display accordingly. The system has several ways to effect when Joyend content is showing or not. Screen List Auto - plist based black \/ white list Manual - black \/ white list update in code Manual screen controls Hide \/ Show display Minimize display Screen List Validation Controls Add JoynedMobileSDKScreenlists as a Dictionary to the Joyned-Info plist file to configure automatic screenlist. To the resulting Dictionary add the following keys with the relevant string arrays: JoynedMobileSDKScreenWhitelist JoynedMobileSDKScreenBlacklist Note: Entries in the blacklist take president over the ones in whitelist Example:  You can add or remove additional screen from the system black\/white list with the following API via the public access point (JoynedSDK) JoynedSDK\/append(WhiteList:) JoynedSDK\/remove(WhiteList:) JoynedSDK\/append(BlackList:) JoynedSDK\/remove(BlackList:) JoynedSDK\/clearScreensBlackList() Manual screen controls You can use the JoynedMobileSDK via its public access point (JoynedSDK) to effect how the Joyned UI acts. JoynedSDK\/hideDisplay() JoynedSDK\/showDisplay() JoynedSDK\/minimizeDisplay()",
    "summary" : "Joyned Mobile SDK screen change monitor",
    "title" : "Screen Validation Controls"
  }
]